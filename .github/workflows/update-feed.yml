name: Update Dream RSS Feed

on:
  schedule:
    - cron: '10 15 * * *'  # 매일 한국시간 자정 10분
  workflow_dispatch:  # 수동 실행 가능

# 동시성 제어
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  update-feed:
    runs-on: ubuntu-latest
    # 워크플로우에 필요한 권한 명시적 부여
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # GitHub 토큰 명시적 설정
          token: ${{ github.token }}

      - name: Setup Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Prepare directory
        run: |
          mkdir -p docs
          echo "Current directory structure:"
          ls -la
          echo "Docs directory:"
          ls -la docs/ || echo "Empty docs directory"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install openai feedgen

      - name: Generate RSS feed
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python generate_rss.py

      - name: Check generated files
        run: |
          echo "확인 중..."
          echo "RSS 파일:"
          ls -la docs/rss.xml || echo "RSS 파일이 없습니다"
          echo "used_keywords.json:"
          ls -la used_keywords.json || echo "used_keywords.json 파일이 없습니다"
          
      - name: Git status
        run: git status

      - name: Commit changes
        run: |
          # 변경 사항이 있는지 확인
          if [[ -n $(git status --porcelain) ]]; then
            echo "변경 사항 발견, 커밋 진행..."
            git add -f docs/ used_keywords.json || echo "파일 추가 실패"
            git status
            git commit -m "Update RSS feed on $(date +'%Y-%m-%d %H:%M:%S')" || echo "커밋 실패"
          else
            echo "변경 사항 없음"
          fi

      - name: Push changes
        # GITHUB_TOKEN을 사용하여 명시적 권한 부여
        run: |
          # 현재 브랜치 확인
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "현재 브랜치: $CURRENT_BRANCH"
          
          # GitHub Token을 사용하여 푸시 (인증 문제 회피)
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}.git
          
          # 푸시 시도
          git push origin $CURRENT_BRANCH || echo "푸시 실패 - 오류 로그:"
          
          # 실패 시 상세 진단
          if [ $? -ne 0 ]; then
            echo "푸시 실패, 디버깅 정보:"
            git remote -v
            git branch -a
            echo "GitHub 리포지토리: ${{ github.repository }}"
            echo "GitHub ref: ${{ github.ref }}"
          fi
